package math

mt vector[type E, Size dim] = record {
    req dim >= 1 or error('A vector must have at least one element.')
    
    field array[E, dim] values
    
    // Functions declared without parentheses must be called without them.
    fn x -> E = values[0]
    
    if dim >= 2 {
        fn y -> E = values[1]
    }
    
    fn len -> E = sqrt(values.fold(v => v**2))
    
    fn dot(self as a, vector[E, dim] b) -> E = {
        zip(a.values, b.values).sum(v, w => v*w)
    }
    
    fn scale(E s) -> vector[E, dim] = (values: values.map(v => v * s))
}

spec vector when dim = 1 {
    ovr len = x
}

spec vector when dim >= 3 {
    fn z -> E = values[2]
}

spec vector[dim: 3] {
    fn cross(self as a, vector3[E] b) -> vector3[E] = (values: [
        a.y * b.z - a.z * b.y,
        a.z * b.x - a.x * b.z,
        a.x * b.y - a.y * b.x,
    ])
}

tp vector3f = vector[Float, 3]
tp vector3d = vector[Double, 3]